name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Set the permission to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  NODE_VERSION: '20'  # Latest LTS
  PYTHON_VERSION: '3.10'
  BASE_URL: '/www'  # GitHub Pages repository path

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r repo-analyzer/requirements.txt
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and run repository analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create data directory and ensure repos.json exists
          mkdir -p data
          
          # Create a default repos.json if it doesn't exist
          if [ ! -f "repos.json" ]; then
            echo '{"repositories": []}' > repos.json
            echo "Created empty repos.json"
          fi
          
          # Build the analyzer image
          docker build -t repo-analyzer ./repo-analyzer || \
            { echo "Warning: Failed to build repo-analyzer, continuing with existing repos.json" && exit 0; }
          
          # Run analysis if we have a token
          if [ -n "$GITHUB_TOKEN" ]; then
            docker run --rm \
              -e "GITHUB_TOKEN=$GITHUB_TOKEN" \
              -e "GITHUB_ORG=wronai" \
              -v "$(pwd)/data:/data" \
              repo-analyzer python /app/analyze_repo.py || \
              echo "Warning: Repository analysis failed, continuing with existing data"
            
            # Update repos.json with analyzed data if available
            if [ -f "data/repos_updated.json" ]; then
              cp data/repos_updated.json repos.json
              echo "Updated repos.json with fresh data"
            fi
          else
            echo "No GITHUB_TOKEN provided, using existing repos.json"
          fi
          
          # Ensure repos.json is valid
          if ! jq empty repos.json 2>/dev/null; then
            echo "Error: repos.json is not valid JSON, creating empty version"
            echo '{"repositories": []}' > repos.json
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install and build
        run: |
          # Validate package.json and dependencies
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            exit 1
          fi
          
          # Install dependencies with validation
          npm ci --no-audit || { echo "Error: npm ci failed" && exit 1; }
          
          # Build the production site
          echo "Running build..."
          npm run build || { echo "Error: Build failed" && exit 1; }
          
          # Create SPA 404 page using a here-doc to avoid quote issues
          cat > dist/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <script>sessionStorage.redirect = location.href.replace(/\.html$/, "");</script>
            <meta http-equiv="refresh" content="0;URL=/www/">
          </head>
          <body>Redirecting to <a href="/www/">home page</a>...</body>
          </html>
          EOF
          
          # Verify build output
          ls -la dist/
          [ -f dist/index.html ] || { echo "Error: index.html not found in dist/" && exit 1; }
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'dist'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
